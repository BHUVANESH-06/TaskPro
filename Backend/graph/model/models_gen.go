// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Comment struct {
	ID        string   `json:"id"`
	Content   string   `json:"content"`
	Author    *User    `json:"author"`
	Project   *Project `json:"project,omitempty"`
	Task      *Task    `json:"task,omitempty"`
	CreatedAt string   `json:"createdAt"`
}

type Label struct {
	ID      string   `json:"id"`
	Name    string   `json:"name"`
	Color   string   `json:"color"`
	Project *Project `json:"project"`
}

type Mutation struct {
}

type Project struct {
	ID            string           `json:"id"`
	Name          string           `json:"name"`
	Description   *string          `json:"description,omitempty"`
	Owner         *User            `json:"owner"`
	CreatedAt     string           `json:"createdAt"`
	UpdatedAt     string           `json:"updatedAt"`
	Collaborators []*ProjectMember `json:"collaborators"`
	Tasks         []*Task          `json:"tasks"`
	Comments      []*Comment       `json:"comments"`
	Labels        []*Label         `json:"labels"`
	Progress      int              `json:"progress"`
}

type ProjectMember struct {
	ID        string `json:"id"`
	ProjectID string `json:"projectId"`
	UserID    string `json:"userId"`
	User      *User  `json:"user"`
	Role      string `json:"role"`
	JoinedAt  string `json:"joinedAt"`
}

type Query struct {
}

type Task struct {
	ID          string       `json:"id"`
	Title       string       `json:"title"`
	Description *string      `json:"description,omitempty"`
	Status      TaskStatus   `json:"status"`
	Priority    TaskPriority `json:"priority"`
	DueDate     *string      `json:"dueDate,omitempty"`
	Project     *Project     `json:"project"`
	AssignedTo  *User        `json:"assignedTo,omitempty"`
	CreatedAt   string       `json:"createdAt"`
	UpdatedAt   string       `json:"updatedAt"`
	Comments    []*Comment   `json:"comments"`
	Labels      []*Label     `json:"labels"`
}

type User struct {
	ID                    string     `json:"id"`
	Name                  string     `json:"name"`
	Email                 string     `json:"email"`
	Token                 *string    `json:"token,omitempty"`
	CreatedAt             string     `json:"createdAt"`
	UpdatedAt             string     `json:"updatedAt"`
	ProjectsCreated       []*Project `json:"projectsCreated"`
	ProjectsCollaborating []*Project `json:"projectsCollaborating"`
	TasksAssigned         []*Task    `json:"tasksAssigned"`
	Comments              []*Comment `json:"comments"`
}

type TaskPriority string

const (
	TaskPriorityLow    TaskPriority = "LOW"
	TaskPriorityMedium TaskPriority = "MEDIUM"
	TaskPriorityHigh   TaskPriority = "HIGH"
)

var AllTaskPriority = []TaskPriority{
	TaskPriorityLow,
	TaskPriorityMedium,
	TaskPriorityHigh,
}

func (e TaskPriority) IsValid() bool {
	switch e {
	case TaskPriorityLow, TaskPriorityMedium, TaskPriorityHigh:
		return true
	}
	return false
}

func (e TaskPriority) String() string {
	return string(e)
}

func (e *TaskPriority) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskPriority(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskPriority", str)
	}
	return nil
}

func (e TaskPriority) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TaskPriority) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TaskPriority) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type TaskStatus string

const (
	TaskStatusTodo       TaskStatus = "TODO"
	TaskStatusInProgress TaskStatus = "IN_PROGRESS"
	TaskStatusDone       TaskStatus = "DONE"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusTodo,
	TaskStatusInProgress,
	TaskStatusDone,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusTodo, TaskStatusInProgress, TaskStatusDone:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TaskStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TaskStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
